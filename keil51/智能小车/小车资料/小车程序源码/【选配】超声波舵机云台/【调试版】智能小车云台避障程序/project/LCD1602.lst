C51 COMPILER V9.00   LCD1602                                                               07/23/2019 18:55:21 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE LCD1602
OBJECT MODULE PLACED IN ..\output\LCD1602.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\source\LCD1602.c BROWSE DEBUG OBJECTEXTEND PRINT(.\LCD1602.lst) OBJECT(.
                    -.\output\LCD1602.obj)

line level    source

   1          #include "config.h"
   2          #include "Lcd1602.h"
   3          
   4          /*=================================================
   5          *函数名称：Read_Busy
   6          *函数功能：判断1602液晶忙，并等待
   7          =================================================*/
   8          void Read_Busy()
   9          {
  10   1              uint8 busy;
  11   1              LCD1602_DB = 0xff;//复位数据总线
  12   1              LCD1602_RS = 0;   //拉低RS
  13   1              LCD1602_RW = 1;   //拉高RW读
  14   1              do
  15   1              {
  16   2                      LCD1602_EN = 1;//使能EN
  17   2                      busy = LCD1602_DB;//读回数据
  18   2                      LCD1602_EN = 0;  //拉低使能以便于下一次产生上升沿
  19   2              }while(busy & 0x80); //判断状态字BIT7位是否为1，为1则表示忙，程序等待
  20   1      }
  21          /*=================================================
  22          *函数名称：LCD1602_Write_Cmd
  23          *函数功能：写LCD1602命令
  24          *调用：Read_Busy();
  25          *输入：cmd:要写的命令
  26          =================================================*/
  27          void LCD1602_Write_Cmd(uint8 cmd)
  28          {
  29   1              Read_Busy();     //判断忙，忙则等待
  30   1              LCD1602_RS = 0;  //选择为写命令
  31   1              LCD1602_RW = 0; //模式为写
  32   1              LCD1602_DB = cmd;//写入命令
  33   1              LCD1602_EN = 1;  //拉高使能端 数据被传输到LCD1602内
  34   1              LCD1602_EN = 0;  //拉低使能以便于下一次产生上升沿
  35   1      }
  36          /*=================================================
  37          *函数名称：LCD1602_Write_Dat
  38          *函数功能：写LCD1602数据
  39          *调用：Read_Busy();
  40          *输入：dat：需要写入的数据
  41          =================================================*/
  42          void LCD1602_Write_Dat(uint8 dat)
  43          {
  44   1              Read_Busy();  //判断忙，忙则等待
  45   1              LCD1602_RS = 1; //选择为写数据
  46   1              LCD1602_RW = 0; //模式为写
  47   1              LCD1602_DB = dat; //写入8位数据
  48   1              LCD1602_EN = 1;   //拉高使能端 数据被传输到LCD1602内
  49   1              LCD1602_EN = 0;   //拉低使能以便于下一次产生上升沿
  50   1      }
  51          /*=================================================
  52          *函数名称：LCD1602_Clear_Screen
  53          *函数功能：清屏
  54          =================================================*/
C51 COMPILER V9.00   LCD1602                                                               07/23/2019 18:55:21 PAGE 2   

  55          //void LCD1602_Clear_Screen()
  56          //{
  57          //      LCD1602_Write_Cmd(0x01);
  58          //}
  59          /*=================================================
  60          *函数名称：LCD1602_Open_Cursor
  61          *函数功能：打开光标的闪烁效果
  62          =================================================*/
  63          //void LCD1602_Open_Cursor()
  64          //{
  65          //      LCD1602_Write_Cmd(0x0F);
  66          //}
  67          /*=================================================
  68          *函数名称：LCD1602_Close_Cursor
  69          *函数功能：关闭光标显示
  70          =================================================*/
  71          //void LCD1602_Close_Cursor()
  72          //{
  73          //      LCD1602_Write_Cmd(0x0C);
  74          //}
  75          /*=================================================
  76          *函数名称：LCD1602_Set_Cursor
  77          *函数功能：在指定位置显示光标,设置RAM起始位置
  78          *调用：LCD1602_Write_Cmd();
  79          *输入：x：要显示的横坐标取值0-40，y：要显示的行坐标取值0-1（0为第一行,1为第二行）
  80          =================================================*/
  81          void LCD1602_Set_Cursor(uint8 x, uint8 y)
  82          {
  83   1              if(y) x |= 0x40;
  84   1              x |= 0x80;
  85   1              LCD1602_Write_Cmd(x);
  86   1      }
  87          /*=================================================
  88          *函数名称：LCD1602_Dis_OneChar
  89          *函数功能：在指定位置显示一个字符
  90          *调用：LCD1602_Set_Cursor(x, y); LCD1602_Write_Dat();   
  91          *输入：x：要显示的横坐标取值0-40，y：要显示的行坐标取值0-1（0为第一行,1为第二行）
  92                          dat：需要显示的数据以ASCLL形式显示
  93          =================================================*/
  94          void LCD1602_Dis_OneChar(uint8 x, uint8 y, uint8 dat)
  95          {
  96   1              LCD1602_Set_Cursor(x, y);//设置RAM起始位置
  97   1              LCD1602_Write_Dat(dat);  //写入一个字节的数据   
  98   1      }
  99          /*=================================================
 100          *函数名称：LCD1602_Dis_Str
 101          *函数功能：在指定位置显示字符串
 102          *调用：LCD1602_Set_Cursor(x, y); LCD1602_Write_Dat();
 103          *输入：x：要显示的横坐标取值0-40，y：要显示的行坐标取值0-1（0为第一行,1为第二行）
 104                          *str：需要显示的字符串
 105          =================================================*/
 106          void LCD1602_Dis_Str(uint8 x, uint8 y, uint8 *str)
 107          {
 108   1              LCD1602_Set_Cursor(x, y);//设置RAM起始位置
 109   1              while(*str != '\0')          //写入字符串数据
 110   1              {
 111   2                      LCD1602_Write_Dat(*str++);
 112   2              }
 113   1      }
 114          /*=================================================
 115          *函数名称：Init_LCD1602
 116          *函数功能：1602初始化
C51 COMPILER V9.00   LCD1602                                                               07/23/2019 18:55:21 PAGE 3   

 117          *调用： LCD1602_Write_Cmd();
 118          =================================================*/
 119          void Init_LCD1602()
 120          {
 121   1              LCD1602_Write_Cmd(0x38); //     设置16*2显示，5*7点阵，8位数据接口
 122   1              LCD1602_Write_Cmd(0x0c); //开显示,关闭光标
 123   1              LCD1602_Write_Cmd(0x06); //读写一字节后地址指针加1
 124   1              LCD1602_Write_Cmd(0x01); // 清屏
 125   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    132    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
